name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run Go Lint and Vet
      run: |
        go install golang.org/x/lint/golint@latest
        go vet ./... > govet.txt || true
        golint ./... > golint.txt || true

    - name: Run Go Tests
      run: |
        go test ./... -coverprofile=coverage.out > gotest.txt || true

    - name: AI Review Summary
      uses: actions/github-script@v6
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      with:
        script: |
          const fs = require('fs');

          const vet = fs.readFileSync('govet.txt', 'utf8');
          const lint = fs.readFileSync('golint.txt', 'utf8');
          const test = fs.readFileSync('gotest.txt', 'utf8');

          const body = `
### ðŸ§  AI Code Review Summary

You're reviewing a PR on a Go repo. Analyze the following output and provide:
- Insights about code quality
- Potential bugs or code smells
- Missed test cases
- Suggestions for improvements

### ðŸ§ª Go Vet
${vet || 'No issues found'}

### ðŸ’… Golint
${lint || 'No issues found'}

### âœ… Tests
${test || 'All tests passed'}

Provide a short summary in Markdown.
`;

          const response = await fetch("https://api.openai.com/v1/chat/completions", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
              model: "gpt-4",
              messages: [{ role: "user", content: body }],
              temperature: 0.4
            })
          });

          const data = await response.json();
          const summary = data.choices?.[0]?.message?.content || "AI could not generate a summary.";

          const pr = context.payload.pull_request;
          const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
          await octokit.rest.issues.createComment({
            issue_number: pr.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

